#!/bin/python

import datetime
import json
import os.path
import requests
import sys
import urllib
from os.path import expanduser
from urllib import request

CONFIG_FILE_NAME = ".uploader"
CONFIG_LOCATION = expanduser("~") + "/" + CONFIG_FILE_NAME
SERVER_ADDRESS = ""

''' **************************************** 
    Utility
    **************************************** '''

class colors:
    HEADER  = "\033[95m"
    OKBLUE  = "\033[94m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL    = "\033[91m"
    ENDC    = "\033[0m"
    BOLD    = "\033[1m"

def print_header(text):
    print(colors.HEADER + str(text) + colors.ENDC)

def print_warning(message):
    print(colors.WARNING + message + colors.ENDC)

def print_ok_blue(message):
    print(colors.OKBLUE + message + colors.ENDC)

def print_ok_green(message):
    print(colors.OKGREEN + message + colors.ENDC)

def fetch_and_format_time(json_item):
        current_time = json_item["TimeCreated"] 
        pretty_time = datetime.datetime.fromtimestamp(
            int(current_time)).strftime('%I:%M:%S')
        print(colors.BOLD + pretty_time,end=" " + colors.ENDC)


def die(message):
    print(colors.BOLD + colors.FAIL + str(message) + colors.ENDC)
    sys.exit(1)

''' **************************************** 
    Primary Server Class 
    **************************************** '''

class Server:
    def __init__(self, address):
        self.address = address
        try:
            self.state = json.loads(requests.get(address).text)
            self.max_upload_size = self.state["Info"]["MaxUploadSize"]
        except requests.exceptions.RequestException as e:
            die("No connection to server")

    def info(self):
        print_header("Info:")
        info = self.state["Info"]
        if info is None:
            print("No info to show")
        else:
            for item in info:
               print(item + ": " + str(info[item]))

    def files(self):
        files = self.state["Files"]
        if files is None:
            print_warning("No files to show")
        else:
            print_header("Files:")
            for item in files:
                fetch_and_format_time(item)
                print(item["Name"],end=" ")
                print(item["URL"])

    def texts(self):
        texts = self.state["Texts"]
        if texts is None:
            print_warning("No texts to show")
        else:
            print_header("Texts:")
            for item in texts:
                fetch_and_format_time(item)
                print(item["Content"])

    def upload_file(self,file_path):
        if not os.path.isfile(file_path):
            die("File does not exist")
        if self.max_upload_size < os.stat(file_path).st_size:
            die("File too large to upload")
        f = {'file': open(file_path, "rb")}
        try:
            response = requests.post(self.address,files=f)
            response.raise_for_status()
            for f in reversed(response.json()["Files"]):
                if f["Name"] == os.path.basename(file_path):
                    return(f["URL"])
        except requests.exceptions.RequestException as e:
            die("Couldn't upload file")

    def upload_text(self,text):
        payload = {"text": text}
        try:
            response = requests.post(self.address,payload)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            die("Couldn't upload text'")

''' ****************************************
    Client functions
    **************************************** '''

def parse_config(config_location):
    f = open(config_location)
    global SERVER_ADDRESS
    SERVER_ADDRESS = f.read()

def kill_config():
    os.remove(CONFIG_LOCATION)

def configure(config_location):
    serverAddress = input("Server address: ")
    with open(config_location, "a") as myfile:
        myfile.write(serverAddress)
    parse_config(config_location)

def reset_configuration():
    kill_config()
    configure(CONFIG_LOCATION)

def usage():
    print("Usage: uploader [option] [message|file]")

def client_texts(arguments, srvr):
    if(len(arguments) > 1):
        srvr.upload_text(arguments[1])
    else:
        srvr.texts()

def client_files(arguments, srvr):
    if(len(arguments) > 1):
        url = srvr.upload_file(arguments[1])
        print_ok_blue("File URL:")
        print_ok_green(url)
    else:
        srvr.files()

''' **************************************** 
    Main
    **************************************** '''

def main(argv):
    ''' Check if a config file exists and configure client '''
    config_location = CONFIG_LOCATION
    if os.path.isfile(config_location):
        parse_config(config_location)       
    else:
        configure(config_location)

    ''' Parse arguments '''
    if not argv:
        srvr = Server(SERVER_ADDRESS)
        srvr.files()
        srvr.texts()
    elif argv[0] == "-r":
        reset_configuration()
    else:
        srvr = Server(SERVER_ADDRESS)
        if argv[0] == "-f":
            client_files(argv,srvr)
        elif argv[0] == "-i":
            srvr.info()
        elif argv[0] == "-t":
            client_texts(argv,srvr)
        else:
            usage()
    ''' Done '''
    sys.exit(0)

if __name__ == '__main__':
    main(sys.argv[1:])
